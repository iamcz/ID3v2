/*******************************************************************************
 * Copyright (c) 2014, Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/*!
 * @file        main.cpp
 * @copyright   (c) 2014 - Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * @abstract    ID3v2 test executable
 */

#include <ID3v2.h>

int main( void )
{
    ID3v2::Tag                                      tag( "/Users/macmade/Desktop/song.mp3" );
    ID3v2::AbstractFrame                          * frame;     
    std::vector< ID3v2::AbstractFrame * >           frames;
    std::vector< ID3v2::AbstractFrame * >::iterator it;
    
    if( tag.IsValid() == false )
    {
        std::cout << "Invalid ID3v2 file" << std::endl;
        
        return EXIT_SUCCESS;
    }
    else
    {
        std::cout << "ID3v2 version:          " << tag.GetVersion().GetStringValue() << std::endl;
        
        std::cout << "Unsynchronisation:      " << ( ( tag.HasFlag( ID3v2::Tag::FlagUnsynchronisation     ) ) ? "Yes" : "No" ) << std::endl;
        std::cout << "Extended header:        " << ( ( tag.HasFlag( ID3v2::Tag::FlagExtendedHeader        ) ) ? "Yes" : "No" ) << std::endl;
        std::cout << "Experimental indicator: " << ( ( tag.HasFlag( ID3v2::Tag::FlagExperimentalIndicator ) ) ? "Yes" : "No" ) << std::endl;
        
        std::cout << "Header size:            " << tag.GetSize() << std::endl;
        
        frames = tag.GetFrames();
        
        for( it = frames.begin(); it != frames.end(); ++it )
        {
            frame = *( it );
            
            std::cout << std::endl;
            std::cout << "Frame: " << frame->GetName() << " (" << frame->GetDescription() << ")" << std::endl;
            std::cout << std::endl;
            std::cout << "    - Size:                    " << frame->GetSize() << std::endl;
            std::cout << "    - Tag alter preservation:  " << ( ( frame->HasFlag( ID3v2::AbstractFrame::FlagTagAlterPreservation  ) ) ? "No"  : "Yes" ) << std::endl;
            std::cout << "    - File alter preservation: " << ( ( frame->HasFlag( ID3v2::AbstractFrame::FlagFileAlterPreservation ) ) ? "No"  : "Yes" ) << std::endl;
            std::cout << "    - Read only:               " << ( ( frame->HasFlag( ID3v2::AbstractFrame::FlagReadOnly              ) ) ? "Yes" : "No" ) << std::endl;
            std::cout << "    - Compression:             " << ( ( frame->HasFlag( ID3v2::AbstractFrame::FlagCompression           ) ) ? "Yes" : "No" ) << std::endl;
            std::cout << "    - Encryption:              " << ( ( frame->HasFlag( ID3v2::AbstractFrame::FlagCompression           ) ) ? "Yes" : "No" ) << std::endl;
            std::cout << "    - Grouping identity:       " << ( ( frame->HasFlag( ID3v2::AbstractFrame::FlagGroupingIdentity      ) ) ? "Yes" : "No" ) << std::endl;

        }
    }
    
    return EXIT_SUCCESS;
}
